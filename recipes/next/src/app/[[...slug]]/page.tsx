/**
 * This file implements a catch-all route that renders the user-facing pages
 * generated by Brizy. For any route visited (with exception of other hardcoded
 * pages in /app), it will check your database (via `getPage`) for a Brizy page
 * and render it using <Preview>.
 *
 * All routes produced by this page are statically rendered using incremental
 * static site generation. After the first visit, the page will be cached as
 * a static file. Subsequent visits will receive the cache. Publishing a page
 * will invalidate the cache as the page is written in /api/editor/route.ts
 */

import { notFound, redirect } from "next/navigation";
import { getPage } from "@/lib/item/getPage";
import { getProject } from "@/lib/project/getProject";
import { Client } from "./client";
import { CollectionTypes } from "@/types";
import { getProjectSettings } from "@/lib/projectSettings";
import { Metadata } from "next";

export async function generateMetadata({ params }: { params: { slug: string[] } }): Promise<Metadata> {
  const [collection, item] = params.slug ?? [];
  const settings = getProjectSettings();

  if (!settings) {
    return {
      title: item ?? collection,
    };
  }

  const { seo, sharing } = settings;
  const { title = "", description = "", searchVisibility } = seo ?? {};
  const { title: sharingTitle = "", description: sharingDescription = "" } = sharing ?? {};

  return {
    title,
    description,
    openGraph: {
      title: sharingTitle,
      description: sharingDescription,
    },
    robots: searchVisibility ? "index, follow" : "noindex, nofollow",
  };
}

export default async function Page({ params }: { params: { slug: string[] } }) {
  let [collection, item] = params.slug ?? [];

  if (!item) {
    if (!collection) {
      // Redirect to the admin pages list if no collection is provided
      return redirect("/admin/pages");
    }

    item = collection;
    collection = CollectionTypes.PAGE;
  }

  const pageData = getPage(collection, item);
  const projectData = getProject();

  if (!pageData || !projectData) {
    return notFound();
  }

  return <Client pageData={pageData} projectData={projectData} />;
}

// Force Next.js to produce static pages: https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config#dynamic
// Delete this if you need dynamic rendering, such as access to headers or cookies
export const dynamic = "force-static";
